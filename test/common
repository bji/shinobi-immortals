

function pda ()
{
    solxact pda $@ | cut -d . -f 1
}


function should_run_test ()
{
    [ -z "$TESTS" ] || [[ "$TESTS" = *"[$1]"* ]]
}


function sanitize_output ()
{
    if [[ "$@" = "ERROR: {"* ]]; then
        echo "$@" | sed -r -e 's/Program [^ ]+/Program REDACTED/g' |                                                   \
            sed -r -e 's/consumed [^ ]+ of [^ ]+/consumed REDACTED/g' |                                                \
            sed -r -e 's/,\"unitsConsumed\":[[:digit:]]+//g' |                                                         \
            sed -r -e 's/lamports [[:digit:]]+/lamports REDACTED/g' |                                                  \
            sed -r -e 's/need [[:digit:]]+/need REDACTED/g' | tr -d "'"
    else
        echo "$@"
    fi
}


function wait_for_block_time ()
{
    local end=$1

    while true; do
        local now=`current_block_time`
        if [ "0$now" -gt "0$end" ]; then
            break
        fi
        echo "Waiting for $(($end-$now)) more seconds"
        sleep 3
    done
}


function transfer ()
{
    local FROM=$1
    local TO=$2
    local SOL=$3

    echo "Transferring $SOL from $FROM to $TO"
    solana transfer -u l -k $FROM $TO $SOL --allow-unfunded-recipient --commitment finalized >/dev/null 2>/dev/null
}


function account_balance ()
{
    local ACCOUNT=$1

    solana balance -u l $ACCOUNT | cut -d ' ' -f 1    
}


# Assumes $FROM is the fee payer
function transfer_all_except ()
{
    local FROM=$1
    local TO=$2
    local EXCEPT_SOL=$3

    # Add 0.000005 to account for tx fee
    EXCEPT_SOL=`echo "20 k $EXCEPT_SOL 0.000005 + p" | dc`

    CURRENT_SOL=`account_balance $FROM`

    DIFF=`echo "20 k $CURRENT_SOL $EXCEPT_SOL - p" | dc`

    if [[ $DIFF != -* ]]; then
        echo "Transferring $DIFF from $FROM to $TO"
        solana transfer -u l -k $FROM $TO $DIFF --allow-unfunded-recipient --commitment finalized >/dev/null 2>/dev/null
    fi
}


# Returns 0 if $1 < $2, else returns 1
function less_than ()
{
    if [[ `echo "$1 $2 - p" | dc -` = -* ]]; then
        return 0
    else
        return 1
    fi
}


function assert ()
{
    RESULT=$?
    
    local TEST_NAME=$1
    shift
    local TEST_OUTPUT=`sanitize_output "$@"`

    if [ $RESULT -ne 0 ]; then
        echo "FAIL: $TEST_NAME failed when success was expected:"
        echo "$TEST_OUTPUT"
        echo
        exit 1
    else
        # Transactions can successfully be submitted (passing simulation) but then fail when actually run on chain;
        # so fetch the transaction signature and wait until its results are known
        if [[ "$TEST_OUTPUT" = Transaction\ signature:\ * ]]; then
            SIGNATURE=`echo "$TEST_OUTPUT" | cut -d ' ' -f 3`
            # Try for at most 10 seconds
            for i in `seq 1 10`; do
                JSON=`curl -s http://localhost:8899 -X POST -H "Content-Type: application/json" -d "{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"getTransaction\",\"params\":[\"$SIGNATURE\",\"json\"]}"`
                if [ -n "$JSON" ]; then
                    if [ "`echo $JSON | jq .result`" != "null" -a                                                     \
                         "`echo $JSON | jq .result.meta`" != "null" -a                                                \
                         "`echo $JSON | jq .result.meta.err`" != "null" ]; then
                        echo "FAIL: $TEST_NAME failed when success was expected:"
                        echo $JSON
                        exit 1
                    fi
                    echo "+ $TEST_NAME"
                    return
                fi
                sleep 1
            done
        fi
        echo "FAIL: $TEST_NAME failed when success was expected:"
        echo $TEST_OUTPUT
        exit 1
    fi
}


function assert_fail ()
{
    RESULT=$?
    
    local TEST_NAME=$1
    shift
    local EXPECTED_OUTPUT=$1
    shift
    local TEST_OUTPUT=`sanitize_output "$@"`

    if [ $RESULT -eq 0 ]; then
        # Transactions can successfully be submitted (passing simulation) but then fail when actually run on chain;
        # so fetch the transaction signature and wait until its results are known
        if [[ "$TEST_OUTPUT" = Transaction\ signature:\ * ]]; then
            SIGNATURE=`echo "$TEST_OUTPUT" | cut -d ' ' -f 3`
            # Try for at most 10 seconds
            for i in `seq 1 10`; do
                TEST_OUTPUT=`curl -s http://localhost:8899 -X POST -H "Content-Type: application/json" -d "{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"getTransaction\",\"params\":[\"$SIGNATURE\",\"json\"]}"`
                if [ -n "$TEST_OUTPUT" ]; then
                    break
                fi
                sleep 1
            done
            if [ -z "$TEST_OUTPUT" ]; then
                echo "FAIL: $TEST_NAME did not land ($SIGNATURE)"
                exit 1
            fi
        fi
    fi

    if [ "$EXPECTED_OUTPUT" != "$TEST_OUTPUT" ]; then
        echo "FAIL: $TEST_NAME incorrect output:"
        diff <(echo "$EXPECTED_OUTPUT") <(echo "$TEST_OUTPUT")
        echo
        exit 1
    else
        echo "- $TEST_NAME"
    fi
}


function lamports_from_sol ()
{
    local SOL=$1

    printf "%0.f" `echo "$SOL 1000 * 1000 * 1000 * p" | dc`
}


function sha256_of ()
{
    if [ -n "$1" ]; then
        echo -n "$@" | sha256sum | cut -d ' ' -f 1
    else
        sha256sum | cut -d ' ' -f 1
    fi
}


function make_funded_keypair ()
{
    local KEY_FILE=$1
    local SOL=$2

    if [ -n "$3" ]; then
        local COMMITMENT="--commitment finalized"
    else
        local COMMITMENT=
    fi

    echo "Creating keypair @ $KEY_FILE with $SOL SOL"

    solana-keygen new -o $KEY_FILE --no-bip39-passphrase >/dev/null 2>/dev/null

    solana -u l airdrop -k $KEY_FILE $SOL $COMMITMENT >/dev/null 2>/dev/null
}


function make_stake_account ()
{
    local AUTHORITY_KEY_FILE=$1
    local STAKE_KEY_FILE=$2
    local SOL=$3

    echo "Creating stake account @ $STAKE_KEY_FILE authority $AUTHORITY_KEY_FILE with lamports $SOL"

    solana-keygen new -o $STAKE_KEY_FILE --no-bip39-passphrase --force >/dev/null 2>/dev/null

    solana -u l create-stake-account -k $AUTHORITY_KEY_FILE $STAKE_KEY_FILE $SOL $4 >/dev/null 2>/dev/null
}


function get_splata_account ()
{
    local mint=$1
    local user=$2

    pda "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" [ pubkey $user pubkey $SPL_TOKEN_PROGRAM_PUBKEY                \
                                                         pubkey $mint ]
}


function compute_metadata_sha256 ()
{
    local metadata_base64=$1
    local salt=$2

    # Convert salt to 8 digit hex, little endian
    salt=`printf "%016x" $salt | tac -rs ..`

    (echo "$metadata_base64" | base64 -d | sha256sum | cut -d ' ' -f 1 | xxd -r -p;                                   \
     echo $salt | xxd -r -p | tr -d '\n') | sha256sum | cut -d ' ' -f 1
}


function get_account_data ()
{
    local ACCOUNT_PUBKEY=$1
    local DATA_OFFSET=$2
    local DATA_LEN=$3

    if [ -n "$DATA_OFFSET" ]; then
        DATA_SLICE="\"dataSlice\":{\"offset\":$DATA_OFFSET,\"length\":$DATA_LEN},"
    else
        DATA_SLICE=
    fi

    DATA=`curl -s http://localhost:8899 -X POST -H "Content-Type: application/json" -d "{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"getAccountInfo\",\"params\":[\"$ACCOUNT_PUBKEY\",{$DATA_SLICE\"encoding\":\"base64\"}]}" | jq -r ".result.value.data[0]"`

    if [ "$DATA" = "null" ]; then
        echo -n ""
    else
        echo -n "$DATA"
    fi
}


function get_token_balance ()
{
    local mint=$1
    local user=$2

    local account=`get_splata_account $mint $user`

    local DATA=`get_account_data $account`

    if [ -z "$DATA" ]; then
        echo 0
    else
        # The amount is at offset 64
        echo "$DATA" | base64 -d | od -An -j64 -N8 -tu8 -v | tr -d [:space:]
    fi
}


function hex_digit ()
{
    local decimal=$1

    if [ $decimal -lt 16 ]; then
        echo -n "0"
    fi
    
    echo "16o $x p" | dc
}


function pubkey_binary ()
{
    local pubkey=$1

    for x in `solxact pubkey bytes $1 | tr -d '[' | tr -d ']' | tr ',' ' '`; do hex_digit $x; done | xxd -r -p
}


# The solana command is messed up and sometimes epoch-info fails
function current_epoch ()
{
    solana -u l epoch-info | grep ^Epoch: | cut -d ' ' -f 2
}


function current_block_time ()
{
    solana -u l block-time --output=json | jq .timestamp
}


function sleep_until_next_epoch ()
{
    START_EPOCH=`current_epoch`
    while true; do
        echo "Waiting for epoch $START_EPOCH to complete"
        sleep 5
        CURRENT_EPOCH=`current_epoch`
        if [ $CURRENT_EPOCH != $START_EPOCH ]; then
            echo "Waiting for epoch $START_EPOCH to complete"
            sleep 5
            break
        fi
    done
}


function setup ()
{
    # Make a temporary directory to hold the validator ledger
    export LEDGER=`mktemp -d`
    
    echo "Starting test validator @ $LEDGER"
    
    # Start the test validator
    solana-test-validator --ledger $LEDGER --ticks-per-slot 16 --slots-per-epoch 100                                  \
                          -u https://api.mainnet-beta.solana.com -c metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s       \
                          -c PwDiXFxQsGra4sFFTT8r1QWRMd4vfumiWC1jfWNfdYT >/dev/null 2>/dev/null &
    
    echo "Waiting 10 seconds for it to settle"
    
    # Give it time to start
    sleep 10
    
    # Detect the vote account
    export VALIDATOR_PUBKEY=`solana -u http://localhost:8899 validators 2>/dev/null | head -2 | tail -1               \
                                                 | awk '{ print $2 }'`
    export VOTE_PUBKEY=`solana -u http://localhost:8899 validators 2>/dev/null | head -2 | tail -1                    \
                    | awk '{ print $3 }'                `
    
    # Create keys: program, super, admin, rich_user1, rich_user2, poor_user, nonexistent_user
    make_funded_keypair $LEDGER/program.json 0
    make_funded_keypair $LEDGER/super.json 100000
    make_funded_keypair $LEDGER/admin.json 100000
    make_funded_keypair $LEDGER/rich_user1.json 100000
    make_funded_keypair $LEDGER/rich_user2.json 100000
    make_funded_keypair $LEDGER/poor_user.json 0.01
    make_funded_keypair $LEDGER/nonexistent_user.json 0 finalized
    
    # Build the program
    echo "Making build script"
    $SOURCE/make_build_program.sh $LEDGER/program.json $LEDGER/super.json $VOTE_PUBKEY > $LEDGER/build_program.sh
    chmod +x $LEDGER/build_program.sh
    echo "Building program"
    (cd $LEDGER;                                                                                                      \
     SDK_ROOT=~/.local/share/solana/install/active_release/bin/sdk SOURCE_ROOT=$SOURCE ./build_program.sh)
    
    # Deploy the program.
    echo "Deploying program"
    # Not sure why, but need to sleep to ensure the following succeeds
    sleep 5
    solana -k $LEDGER/super.json -u l program deploy --program-id $LEDGER/program.json $LEDGER/program.so             \
           --commitment finalized >/dev/null 2>/dev/null
    
# Compute pubkeys

    export         SELF_PROGRAM_PUBKEY=`solxact pubkey $LEDGER/program.json`
    export            SUPERUSER_PUBKEY=`solxact pubkey $LEDGER/super.json`
    export                ADMIN_PUBKEY=`solxact pubkey $LEDGER/admin.json`
    export           RICH_USER1_PUBKEY=`solxact pubkey $LEDGER/rich_user1.json`
    export           RICH_USER2_PUBKEY=`solxact pubkey $LEDGER/rich_user2.json`
    export            POOR_USER_PUBKEY=`solxact pubkey $LEDGER/poor_user.json`
    export     NONEXISTENT_USER_PUBKEY=`solxact pubkey $LEDGER/nonexistent_user.json`
    export       SYSTEM_PROGRAM_PUBKEY="11111111111111111111111111111111"
    export    SPL_TOKEN_PROGRAM_PUBKEY="TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
    export       SPLATA_PROGRAM_PUBKEY="ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
    export        STAKE_PROGRAM_PUBKEY="Stake11111111111111111111111111111111111111"
    export         CLOCK_SYSVAR_PUBKEY="SysvarC1ock11111111111111111111111111111111"
    export          RENT_SYSVAR_PUBKEY="SysvarRent111111111111111111111111111111111"
    export     METAPLEX_PROGRAM_PUBKEY="metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
    export STAKE_HISTORY_SYSVAR_PUBKEY="SysvarStakeHistory1111111111111111111111111"
    export         STAKE_CONFIG_PUBKEY="StakeConfig11111111111111111111111111111111"
    export               CONFIG_PUBKEY=`pda $SELF_PROGRAM_PUBKEY [ u8 1 ]`
    export            AUTHORITY_PUBKEY=`pda $SELF_PROGRAM_PUBKEY [ u8 2 ]`
    export         MASTER_STAKE_PUBKEY=`pda $SELF_PROGRAM_PUBKEY [ u8 3 ]`
    export              KI_MINT_PUBKEY=`pda $SELF_PROGRAM_PUBKEY [ u8 4 ]`
    export      BID_MARKER_MINT_PUBKEY=`pda $SELF_PROGRAM_PUBKEY [ u8 11 ]`
    export          KI_METADATA_PUBKEY=`pda $METAPLEX_PROGRAM_PUBKEY                                                  \
                                            [ string metadata                                                         \
                                              pubkey $METAPLEX_PROGRAM_PUBKEY                                         \
                                              pubkey $KI_MINT_PUBKEY ]`
    export  BID_MARKER_METADATA_PUBKEY=`pda $METAPLEX_PROGRAM_PUBKEY                                                  \
                                            [ string metadata                                                         \
                                              pubkey $METAPLEX_PROGRAM_PUBKEY                                         \
                                              pubkey $BID_MARKER_MINT_PUBKEY ]`
}


function teardown ()
{
    echo "Stopping test validator @ $LEDGER"

    solana-validator --ledger $LEDGER exit --force >/dev/null 2>/dev/null

    # Wait until it's exited
    while ps auxww | grep solana-test-ledger | grep -v grep; do
        sleep 1
    done

    rm -rf $LEDGER
}
