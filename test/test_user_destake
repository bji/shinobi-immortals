BYTE_0=`echo -n 0 | base64 | tr -d '\n'`
BYTE_1=`echo -n 1 | base64 | tr -d '\n'`
BYTE_2=`echo -n 2 | base64 | tr -d '\n'`
METADATA0=`(echo -n 0; dd if=/dev/zero bs=1 count=2695 status=none) | base64 | tr -d '\n'`
METADATA1=`(echo -n 1; dd if=/dev/zero bs=1 count=2695 status=none) | base64 | tr -d '\n'`
METADATA2=`(echo -n 2; dd if=/dev/zero bs=1 count=2695 status=none) | base64 | tr -d '\n'`
SALT0=0
SALT1=1
SALT2=2
SHA2560=`compute_metadata_sha256 $METADATA0 $SALT0`
SHA2561=`compute_metadata_sha256 $METADATA1 $SALT1`
SHA2562=`compute_metadata_sha256 $METADATA2 $SALT2`

# This must be set so that user_stake_tx.sh will use the correct vote account
export SHINOBI_SYSTEMS_VOTE_PUBKEY=$VOTE_PUBKEY


# Create accounts and block
if [ -z "$TESTS" ]; then
    # Create stake accounts: delegated_stake, undelegated_stake
    make_stake_account $LEDGER/rich_user1.json $LEDGER/delegated2_stake.json 1000
    make_stake_account $LEDGER/rich_user2.json $LEDGER/delegated2_stake2.json 1000
    make_stake_account $LEDGER/rich_user1.json $LEDGER/delegated2_stake3.json 1000
    make_stake_account $LEDGER/rich_user1.json $LEDGER/undelegated2_stake.json 1000 --commitment=finalized

    # Delegate the delegated stake accounts
    echo "Delegating $LEDGER/delegated2_stake.json"
    solana -u l delegate-stake -k $LEDGER/rich_user1.json $LEDGER/delegated2_stake.json $VOTE_PUBKEY                  \
           >/dev/null 2>/dev/null
    echo "Delegating $LEDGER/delegated2_stake2.json"
    solana -u l delegate-stake -k $LEDGER/rich_user2.json $LEDGER/delegated2_stake2.json $VOTE_PUBKEY                 \
           >/dev/null 2>/dev/null
    echo "Delegating $LEDGER/delegated2_stake3.json"
    solana -u l delegate-stake -k $LEDGER/rich_user1.json $LEDGER/delegated2_stake3.json $VOTE_PUBKEY                 \
           >/dev/null 2>/dev/null

    # 14 0
    assert user_stake_setup_14_0_a                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/admin_create_block_tx.sh                                \
         $ADMIN_PUBKEY 14 0 0 3 0 $((24*60*60)) \`lamports_from_sol 1000\` 1                                          \
         \`lamports_from_sol 1\` false $((24*60*60)) \`lamports_from_sol 1000\` 0                                     \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/admin.json                                                                             \
        | solxact submit l 2>&1`
    assert user_stake_setup_14_0_b                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/admin_add_entries_to_block_tx.sh                        \
         $ADMIN_PUBKEY 14 0 "http://foo.bar.com" none 0 $SHA2560 $SHA2561                                             \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/admin.json                                                                             \
        | solxact submit l 2>&1`
    assert user_stake_setup_14_0_c                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/admin_add_entries_to_block_tx.sh                        \
         $ADMIN_PUBKEY 14 0 "http://foo.bar.com" none 2 $SHA2562                                                      \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/admin.json                                                                             \
        | solxact submit l 2>&1`
    # set metadata
    assert user_stake_setup_14_0_d                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/admin_set_metadata_bytes_tx.sh                          \
         $ADMIN_PUBKEY 14 0 0 0 $BYTE_0                                                                               \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/admin.json                                                                             \
        | solxact submit l 2>&1`
    assert user_stake_setup_14_0_e                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/admin_set_metadata_bytes_tx.sh                          \
         $ADMIN_PUBKEY 14 0 1 0 $BYTE_1                                                                               \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/admin.json                                                                             \
        | solxact submit l 2>&1`
    assert user_stake_setup_14_0_f                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/admin_set_metadata_bytes_tx.sh                          \
         $ADMIN_PUBKEY 14 0 2 0 $BYTE_2                                                                               \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/admin.json                                                                             \
        | solxact submit l 2>&1`
    # reveal entries
    assert user_stake_setup_14_0_g                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/admin_reveal_entries_tx.sh                              \
         $ADMIN_PUBKEY 14 0 0 $SALT0 $SALT1 $SALT2                                                                    \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/admin.json                                                                             \
        | solxact submit l 2>&1`
    # rich_user1 buy entry 0
    assert user_stake_setup_14_0_h                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/user_buy_tx.sh                                          \
         $ADMIN_PUBKEY $RICH_USER1_PUBKEY 14 0 0 \`lamports_from_sol 1001\`                                           \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`
    # rich_user1 stake entry 0
    assert user_stake_setup_14_0_i                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/user_stake_tx.sh                                        \
         $RICH_USER1_PUBKEY 14 0 0 $LEDGER/delegated2_stake.json                                                      \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`
    # rich_user2 buy entry 1
    assert user_stake_setup_14_0_j                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/user_buy_tx.sh                                          \
         $ADMIN_PUBKEY $RICH_USER2_PUBKEY 14 0 1 \`lamports_from_sol 1001\`                                           \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user2.json                                                                        \
        | solxact submit l 2>&1`
    # rich_user2 stake entry 1
    assert user_stake_setup_14_0_k                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/user_stake_tx.sh                                        \
         $RICH_USER2_PUBKEY 14 0 1 $LEDGER/delegated2_stake2.json                                                     \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user2.json                                                                        \
        | solxact submit l 2>&1`

    # 14 0 0 is owned and staked by rich_user1
    # 14 0 1 is owned and staked by rich_user2
    # 14 0 2 is not owned

    # 14 1
    assert user_stake_setup_14_1                                                                                      \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/admin_create_block_tx.sh                                \
         $ADMIN_PUBKEY 14 1 0 1 0 $((24*60*60)) \`lamports_from_sol 1000\` 1                                          \
         \`lamports_from_sol 1\` false $((24*60*60)) \`lamports_from_sol 1000\` 0                                     \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/admin.json                                                                             \
        | solxact submit l 2>&1`

    # 14 1 is an incomplete block

    # 14 2 0 is owned by rich_user1 and is in a block with 10% commission
    assert user_stake_setup_14_2_a                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/admin_create_block_tx.sh                                \
         $ADMIN_PUBKEY 14 2 6553 1 0 $((24*60*60)) \`lamports_from_sol 1000\` 1                                       \
         \`lamports_from_sol 1\` false $((24*60*60)) \`lamports_from_sol 1000\` 0                                     \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/admin.json                                                                             \
        | solxact submit l 2>&1`
    assert user_stake_setup_14_2_b                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/admin_add_entries_to_block_tx.sh                        \
         $ADMIN_PUBKEY 14 2 "http://foo.bar.com" none 0 $SHA2560                                                      \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/admin.json                                                                             \
        | solxact submit l 2>&1`
    # set metadata
    assert user_stake_setup_14_2_c                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/admin_set_metadata_bytes_tx.sh                          \
         $ADMIN_PUBKEY 14 2 0 0 $BYTE_0                                                                               \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/admin.json                                                                             \
        | solxact submit l 2>&1`
    # reveal entry
    assert user_stake_setup_14_2_d                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/admin_reveal_entries_tx.sh                              \
         $ADMIN_PUBKEY 14 2 0 $SALT0                                                                                  \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/admin.json                                                                             \
        | solxact submit l 2>&1`
    # rich_user1 buy entry 0
    assert user_stake_setup_14_2_e                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/user_buy_tx.sh                                          \
         $ADMIN_PUBKEY $RICH_USER1_PUBKEY 14 2 0 \`lamports_from_sol 1001\`                                           \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`
    # rich_user1 stake entry 0
    assert user_stake_setup_14_2_f                                                                                    \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/user_stake_tx.sh                                        \
         $RICH_USER1_PUBKEY 14 2 0 $LEDGER/delegated2_stake3.json                                                     \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`

    # 14 2 0 is owned and staked by rich_user1 and is in a block with 10% commission
fi


export      DELEGATED_STAKE_PUBKEY=`solpda -pubkey $LEDGER/delegated2_stake.json`
export     DELEGATED_STAKE2_PUBKEY=`solpda -pubkey $LEDGER/delegated2_stake2.json`
export     DELEGATED_STAKE3_PUBKEY=`solpda -pubkey $LEDGER/delegated2_stake3.json`
export    UNDELEGATED_STAKE_PUBKEY=`solpda -pubkey $LEDGER/undelegated2_stake.json`


# Bad block
if should_run_test user_destake_bad_block; then
    BLOCK_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[14] u32[14] u32[0]`
    MINT_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[5] Pubkey[$BLOCK_PUBKEY] u16[0]`
    ENTRY_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[15] Pubkey[$MINT_PUBKEY]`
    TOKEN_PUBKEY=`get_splata_account $MINT_PUBKEY $RICH_USER1_PUBKEY`
    KI_DESTINATION_PUBKEY=`get_splata_account $KI_MINT_PUBKEY $RICH_USER1_PUBKEY`
    BRIDGE_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[10] Pubkey[$MINT_PUBKEY]`
    assert_fail user_destake_bad_block                                                                                \
    'ERROR: {"error":{"code":-32002,"data":{"accounts":null,"err":{"InstructionError":[0,{"Custom":1101}]},"logs":["Program REDACTED invoke [1]","Program REDACTED consumed REDACTED compute units","Program REDACTED failed: custom program error: 0x44d"],"returnData":null},"message":"Transaction simulation failed: Error processing Instruction 0: custom program error: 0x44d"},"id":1,"jsonrpc":"2.0"} Try solxact help for help'                                                     \
    `echo "encoding c                                                                                                 \
           fee_payer $RICH_USER1_PUBKEY                                                                               \
           program $SELF_PROGRAM_PUBKEY                                                                               \
           account $RICH_USER1_PUBKEY ws                                                                              \
           account $CONFIG_PUBKEY                                                                                     \
           account $ENTRY_PUBKEY w                                                                                    \
           account $RICH_USER1_PUBKEY s                                                                               \
           account $TOKEN_PUBKEY                                                                                      \
           account $DELEGATED_STAKE_PUBKEY w                                                                          \
           account $KI_DESTINATION_PUBKEY w                                                                           \
           account $RICH_USER1_PUBKEY                                                                                 \
           account $MASTER_STAKE_PUBKEY w                                                                             \
           account $BRIDGE_PUBKEY w                                                                                   \
           account $KI_MINT_PUBKEY w                                                                                  \
           account $AUTHORITY_PUBKEY                                                                                  \
           account $CLOCK_SYSVAR_PUBKEY                                                                               \
           account $SYSTEM_PROGRAM_PUBKEY                                                                             \
           account $STAKE_PROGRAM_PUBKEY                                                                              \
           account $STAKE_HISTORY_SYSVAR_PUBKEY                                                                       \
           account $SPL_TOKEN_PROGRAM_PUBKEY                                                                          \
           account $SPLATA_PROGRAM_PUBKEY                                                                             \
           // Instruction code 16 = Destake //                                                                        \
           u8 16                                                                                                      \
           u64 0"                                                                                                     \
        | solxact encode                                                                                              \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`
fi


# Incomplete block
if should_run_test user_destake_incomplete_block; then
    assert_fail user_destake_incomplete_block                                                                         \
    'ERROR: {"error":{"code":-32002,"data":{"accounts":null,"err":{"InstructionError":[0,{"Custom":1007}]},"logs":["Program REDACTED invoke [1]","Program REDACTED consumed REDACTED compute units","Program REDACTED failed: custom program error: 0x3ef"],"returnData":null},"message":"Transaction simulation failed: Error processing Instruction 0: custom program error: 0x3ef"},"id":1,"jsonrpc":"2.0"} Try solxact help for help'                                                     \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/user_destake_tx.sh                                      \
         $RICH_USER1_PUBKEY 14 1 0 $DELEGATED_STAKE_PUBKEY                                                            \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`
fi


# Bad entry
if should_run_test user_destake_bad_entry; then
    BLOCK_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[14] u32[14] u32[0]`
    MINT_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[5] Pubkey[$BLOCK_PUBKEY] u16[0]`
    ENTRY_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[15] Pubkey[$MINT_PUBKEY]`
    TOKEN_PUBKEY=`get_splata_account $MINT_PUBKEY $RICH_USER1_PUBKEY`
    KI_DESTINATION_PUBKEY=`get_splata_account $KI_MINT_PUBKEY $RICH_USER1_PUBKEY`
    BRIDGE_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[10] Pubkey[$MINT_PUBKEY]`
    assert_fail user_destake_bad_block                                                                                \
    'ERROR: {"error":{"code":-32002,"data":{"accounts":null,"err":{"InstructionError":[0,{"Custom":1102}]},"logs":["Program REDACTED invoke [1]","Program REDACTED consumed REDACTED compute units","Program REDACTED failed: custom program error: 0x44e"],"returnData":null},"message":"Transaction simulation failed: Error processing Instruction 0: custom program error: 0x44e"},"id":1,"jsonrpc":"2.0"} Try solxact help for help'                                                     \
    `echo "encoding c                                                                                                 \
           fee_payer $RICH_USER1_PUBKEY                                                                               \
           program $SELF_PROGRAM_PUBKEY                                                                               \
           account $RICH_USER1_PUBKEY ws                                                                              \
           account $BLOCK_PUBKEY                                                                                      \
           account $CONFIG_PUBKEY w                                                                                   \
           account $RICH_USER1_PUBKEY s                                                                               \
           account $TOKEN_PUBKEY                                                                                      \
           account $DELEGATED_STAKE_PUBKEY w                                                                          \
           account $KI_DESTINATION_PUBKEY w                                                                           \
           account $RICH_USER1_PUBKEY                                                                                 \
           account $MASTER_STAKE_PUBKEY w                                                                             \
           account $BRIDGE_PUBKEY w                                                                                   \
           account $KI_MINT_PUBKEY w                                                                                  \
           account $AUTHORITY_PUBKEY                                                                                  \
           account $CLOCK_SYSVAR_PUBKEY                                                                               \
           account $SYSTEM_PROGRAM_PUBKEY                                                                             \
           account $STAKE_PROGRAM_PUBKEY                                                                              \
           account $STAKE_HISTORY_SYSVAR_PUBKEY                                                                       \
           account $SPL_TOKEN_PROGRAM_PUBKEY                                                                          \
           account $SPLATA_PROGRAM_PUBKEY                                                                             \
           // Instruction code 16 = Destake //                                                                        \
           u8 16                                                                                                      \
           u64 0"                                                                                                     \
        | solxact encode                                                                                              \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`
fi


# Entry of wrong block
if should_run_test user_destake_entry_wrong_block; then
    BLOCK_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[14] u32[14] u32[0]`
    MINT_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[5] Pubkey[$BLOCK_PUBKEY] u16[0]`
    ENTRY_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[15] Pubkey[$MINT_PUBKEY]`
    TOKEN_PUBKEY=`get_splata_account $MINT_PUBKEY $RICH_USER1_PUBKEY`
    KI_DESTINATION_PUBKEY=`get_splata_account $KI_MINT_PUBKEY $RICH_USER1_PUBKEY`
    BRIDGE_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[10] Pubkey[$MINT_PUBKEY]`
    BAD_BLOCK_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[14] u32[14] u32[2]`
    assert_fail user_destake_entry_wrong_block                                                                        \
    'ERROR: {"error":{"code":-32002,"data":{"accounts":null,"err":{"InstructionError":[0,{"Custom":1102}]},"logs":["Program REDACTED invoke [1]","Program REDACTED consumed REDACTED compute units","Program REDACTED failed: custom program error: 0x44e"],"returnData":null},"message":"Transaction simulation failed: Error processing Instruction 0: custom program error: 0x44e"},"id":1,"jsonrpc":"2.0"} Try solxact help for help'                                                     \
    `echo "encoding c                                                                                                 \
           fee_payer $RICH_USER1_PUBKEY                                                                               \
           program $SELF_PROGRAM_PUBKEY                                                                               \
           account $RICH_USER1_PUBKEY ws                                                                              \
           account $BAD_BLOCK_PUBKEY                                                                                  \
           account $ENTRY_PUBKEY w                                                                                    \
           account $RICH_USER1_PUBKEY s                                                                               \
           account $TOKEN_PUBKEY                                                                                      \
           account $DELEGATED_STAKE_PUBKEY w                                                                          \
           account $KI_DESTINATION_PUBKEY w                                                                           \
           account $RICH_USER1_PUBKEY                                                                                 \
           account $MASTER_STAKE_PUBKEY w                                                                             \
           account $BRIDGE_PUBKEY w                                                                                   \
           account $KI_MINT_PUBKEY w                                                                                  \
           account $AUTHORITY_PUBKEY                                                                                  \
           account $CLOCK_SYSVAR_PUBKEY                                                                               \
           account $SYSTEM_PROGRAM_PUBKEY                                                                             \
           account $STAKE_PROGRAM_PUBKEY                                                                              \
           account $STAKE_HISTORY_SYSVAR_PUBKEY                                                                       \
           account $SPL_TOKEN_PROGRAM_PUBKEY                                                                          \
           account $SPLATA_PROGRAM_PUBKEY                                                                             \
           // Instruction code 16 = Destake //                                                                        \
           u8 16                                                                                                      \
           u64 0"                                                                                                     \
        | solxact encode                                                                                              \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`
fi


# Entry that is not staked
if should_run_test user_destake_entry_not_staked; then
    BLOCK_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[14] u32[14] u32[0]`
    MINT_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[5] Pubkey[$BLOCK_PUBKEY] u16[2]`
    ENTRY_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[15] Pubkey[$MINT_PUBKEY]`
    TOKEN_PUBKEY=`get_splata_account $MINT_PUBKEY $RICH_USER1_PUBKEY`
    KI_DESTINATION_PUBKEY=`get_splata_account $KI_MINT_PUBKEY $RICH_USER1_PUBKEY`
    BRIDGE_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[10] Pubkey[$MINT_PUBKEY]`
    assert_fail user_destake_entry_not_staked                                                                         \
    'ERROR: {"error":{"code":-32002,"data":{"accounts":null,"err":{"InstructionError":[0,{"Custom":1036}]},"logs":["Program REDACTED invoke [1]","Program REDACTED consumed REDACTED compute units","Program REDACTED failed: custom program error: 0x40c"],"returnData":null},"message":"Transaction simulation failed: Error processing Instruction 0: custom program error: 0x40c"},"id":1,"jsonrpc":"2.0"} Try solxact help for help'                                                     \
    `echo "encoding c                                                                                                 \
           fee_payer $RICH_USER1_PUBKEY                                                                               \
           program $SELF_PROGRAM_PUBKEY                                                                               \
           account $RICH_USER1_PUBKEY ws                                                                              \
           account $BLOCK_PUBKEY                                                                                      \
           account $ENTRY_PUBKEY w                                                                                    \
           account $RICH_USER1_PUBKEY s                                                                               \
           account $TOKEN_PUBKEY                                                                                      \
           account $DELEGATED_STAKE_PUBKEY w                                                                          \
           account $KI_DESTINATION_PUBKEY w                                                                           \
           account $RICH_USER1_PUBKEY                                                                                 \
           account $MASTER_STAKE_PUBKEY w                                                                             \
           account $BRIDGE_PUBKEY w                                                                                   \
           account $KI_MINT_PUBKEY w                                                                                  \
           account $AUTHORITY_PUBKEY                                                                                  \
           account $CLOCK_SYSVAR_PUBKEY                                                                               \
           account $SYSTEM_PROGRAM_PUBKEY                                                                             \
           account $STAKE_PROGRAM_PUBKEY                                                                              \
           account $STAKE_HISTORY_SYSVAR_PUBKEY                                                                       \
           account $SPL_TOKEN_PROGRAM_PUBKEY                                                                          \
           account $SPLATA_PROGRAM_PUBKEY                                                                             \
           // Instruction code 16 = Destake //                                                                        \
           u8 16                                                                                                      \
           u64 0"                                                                                                     \
        | solxact encode                                                                                              \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`
fi


# Token not owned by user
if should_run_test user_destake_entry_not_owned; then
    BLOCK_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[14] u32[14] u32[0]`
    MINT_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[5] Pubkey[$BLOCK_PUBKEY] u16[1]`
    ENTRY_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[15] Pubkey[$MINT_PUBKEY]`
    TOKEN_PUBKEY=`get_splata_account $MINT_PUBKEY $RICH_USER1_PUBKEY`
    KI_DESTINATION_PUBKEY=`get_splata_account $KI_MINT_PUBKEY $RICH_USER1_PUBKEY`
    BRIDGE_PUBKEY=`pda $SELF_PROGRAM_PUBKEY u8[10] Pubkey[$MINT_PUBKEY]`
    assert_fail user_destake_entry_not_owned                                                                          \
    'ERROR: {"error":{"code":-32002,"data":{"accounts":null,"err":{"InstructionError":[0,{"Custom":1104}]},"logs":["Program REDACTED invoke [1]","Program REDACTED consumed REDACTED compute units","Program REDACTED failed: custom program error: 0x450"],"returnData":null},"message":"Transaction simulation failed: Error processing Instruction 0: custom program error: 0x450"},"id":1,"jsonrpc":"2.0"} Try solxact help for help'                                                     \
    `echo "encoding c                                                                                                 \
           fee_payer $RICH_USER1_PUBKEY                                                                               \
           program $SELF_PROGRAM_PUBKEY                                                                               \
           account $RICH_USER1_PUBKEY ws                                                                              \
           account $BLOCK_PUBKEY                                                                                      \
           account $ENTRY_PUBKEY w                                                                                    \
           account $RICH_USER1_PUBKEY s                                                                               \
           account $TOKEN_PUBKEY                                                                                      \
           account $DELEGATED_STAKE_PUBKEY w                                                                          \
           account $KI_DESTINATION_PUBKEY w                                                                           \
           account $RICH_USER1_PUBKEY                                                                                 \
           account $MASTER_STAKE_PUBKEY w                                                                             \
           account $BRIDGE_PUBKEY w                                                                                   \
           account $KI_MINT_PUBKEY w                                                                                  \
           account $AUTHORITY_PUBKEY                                                                                  \
           account $CLOCK_SYSVAR_PUBKEY                                                                               \
           account $SYSTEM_PROGRAM_PUBKEY                                                                             \
           account $STAKE_PROGRAM_PUBKEY                                                                              \
           account $STAKE_HISTORY_SYSVAR_PUBKEY                                                                       \
           account $SPL_TOKEN_PROGRAM_PUBKEY                                                                          \
           account $SPLATA_PROGRAM_PUBKEY                                                                             \
           // Instruction code 16 = Destake //                                                                        \
           u8 16                                                                                                      \
           u64 0"                                                                                                     \
        | solxact encode                                                                                              \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`
fi


# Stake Account not staked to the entry
if should_run_test user_destake_wrong_stake; then
    assert_fail user_destake_wrong_stake                                                                              \
    'ERROR: {"error":{"code":-32002,"data":{"accounts":null,"err":{"InstructionError":[0,{"Custom":1105}]},"logs":["Program REDACTED invoke [1]","Program REDACTED consumed REDACTED compute units","Program REDACTED failed: custom program error: 0x451"],"returnData":null},"message":"Transaction simulation failed: Error processing Instruction 0: custom program error: 0x451"},"id":1,"jsonrpc":"2.0"} Try solxact help for help'                                                     \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/user_destake_tx.sh                                      \
         $RICH_USER1_PUBKEY 14 0 0 $DELEGATED_STAKE2_PUBKEY                                                           \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`
fi


# Success with no commission
if should_run_test user_destake_success_no_commission; then
    STAKED=`solana -u l stake-account $MASTER_STAKE_PUBKEY | grep "^Active Stake:" | cut -d ' ' -f 3`
    # Wait for master stake to settle, which would happen immediately after stake rewards paid.  This should then
    # given an interval for destaking that should not change master stake amount.
    while true; do
        NEW_STAKED=`solana -u l stake-account $MASTER_STAKE_PUBKEY | grep "^Active Stake:" | cut -d ' ' -f 3`
        if [ "$STAKED" != "$NEW_STAKED" ]; then
            STAKED=$NEW_STAKED
            break
        fi
        echo "Waiting for master stake to settle"
        sleep 1
    done
    # Save the master stake account account staked
    ADMIN_BALANCE=`lamports_from_sol \`account_balance $ADMIN_PUBKEY\``
    assert user_destake_success_no_commission                                                                         \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/user_destake_tx.sh                                      \
         $RICH_USER1_PUBKEY 14 0 0 $DELEGATED_STAKE_PUBKEY                                                            \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`
    # Check that the master stake account has not changed its balance
    NEW_STAKED=`solana -u l stake-account $MASTER_STAKE_PUBKEY | grep "^Active Stake:" | cut -d ' ' -f 3`
    if [ "$STAKED" != "$NEW_STAKED" ]; then
        echo "FAIL: user_destake_success_no_commission: master stake account increased:"
        echo $STAKED
        echo $NEW_STAKED
        exit 1
    fi
fi


# Success with commission
if should_run_test user_destake_success_with_commission; then
    STAKED=`solana -u l stake-account $MASTER_STAKE_PUBKEY | grep "^Active Stake:" | cut -d ' ' -f 3`
    # Wait for master stake to settle, which would happen immediately after stake rewards paid.  This should then
    # given an interval for destaking that should not change master stake amount.
    while true; do
        NEW_STAKED=`solana -u l stake-account $MASTER_STAKE_PUBKEY | grep "^Active Stake:" | cut -d ' ' -f 3`
        if [ "$STAKED" != "$NEW_STAKED" ]; then
            STAKED=$NEW_STAKED
            break
        fi
        echo "Waiting for master stake to settle"
        sleep 1
    done
    # Save the master stake account account staked
    ADMIN_BALANCE=`lamports_from_sol \`account_balance $ADMIN_PUBKEY\``
    assert user_destake_success_with_commission                                                                       \
    `SELF_PROGRAM_PUBKEY=$SELF_PROGRAM_PUBKEY $SOURCE/scripts/user_destake_tx.sh                                      \
         $RICH_USER1_PUBKEY 14 2 0 $DELEGATED_STAKE3_PUBKEY                                                           \
        | solxact hash l                                                                                              \
        | solxact sign $LEDGER/rich_user1.json                                                                        \
        | solxact submit l 2>&1`
    # Check that the master stake account has increased its balance
    NEW_STAKED=`solana -u l stake-account $MASTER_STAKE_PUBKEY | grep "^Active Stake:" | cut -d ' ' -f 3`
    if less_than $STAKED $NEW_STAKED; then
        echo -n
    else
        echo "FAIL: user_destake_success_with_commission: master stake account did not increase"
        exit 1
    fi
fi
